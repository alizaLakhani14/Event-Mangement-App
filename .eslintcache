[{"C:\\Users\\Dell\\Event-Mangement-App\\src\\index.js":"1","C:\\Users\\Dell\\Event-Mangement-App\\src\\App.js":"2","C:\\Users\\Dell\\Event-Mangement-App\\src\\serviceWorker.js":"3","C:\\Users\\Dell\\Event-Mangement-App\\src\\config\\firebase.js":"4","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\index.js":"5","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\RegisterForm.jsx":"6","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\EditForm.jsx":"7","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\CreateEvent.jsx":"8","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\MyEvents.jsx":"9","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventDetail.jsx":"10","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\LoginForm.jsx":"11","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\LandingPage.jsx":"12","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\HomePage.jsx":"13","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\eventsReducers.js":"14","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\authReducer.js":"15","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\imageUpload.js":"16","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\updateEvent.js":"17","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\errorReducer.js":"18","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\loadingReducer.js":"19","C:\\Users\\Dell\\Event-Mangement-App\\src\\actions\\index.js":"20","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\PlacesInput.jsx":"21","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventList.jsx":"22","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventDetailMap.jsx":"23","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\Header\\Header.jsx":"24"},{"size":1526,"mtime":1611762283176,"results":"25","hashOfConfig":"26"},{"size":1399,"mtime":1611762283162,"results":"27","hashOfConfig":"26"},{"size":5140,"mtime":1611762283179,"results":"28","hashOfConfig":"26"},{"size":609,"mtime":1611762283172,"results":"29","hashOfConfig":"26"},{"size":637,"mtime":1611762283178,"results":"30","hashOfConfig":"26"},{"size":6684,"mtime":1611769389156,"results":"31","hashOfConfig":"26"},{"size":4924,"mtime":1611771606775,"results":"32","hashOfConfig":"26"},{"size":5317,"mtime":1611769312406,"results":"33","hashOfConfig":"26"},{"size":4102,"mtime":1611769280967,"results":"34","hashOfConfig":"26"},{"size":3511,"mtime":1611762283168,"results":"35","hashOfConfig":"26"},{"size":4875,"mtime":1611769357244,"results":"36","hashOfConfig":"26"},{"size":526,"mtime":1611762283166,"results":"37","hashOfConfig":"26"},{"size":1143,"mtime":1611762283165,"results":"38","hashOfConfig":"26"},{"size":382,"mtime":1611769946614,"results":"39","hashOfConfig":"26"},{"size":935,"mtime":1611762283177,"results":"40","hashOfConfig":"26"},{"size":291,"mtime":1611762283178,"results":"41","hashOfConfig":"26"},{"size":381,"mtime":1611762283179,"results":"42","hashOfConfig":"26"},{"size":208,"mtime":1611762283177,"results":"43","hashOfConfig":"26"},{"size":208,"mtime":1611762283178,"results":"44","hashOfConfig":"26"},{"size":7945,"mtime":1611769997797,"results":"45","hashOfConfig":"26"},{"size":2828,"mtime":1611766474863,"results":"46","hashOfConfig":"26"},{"size":1165,"mtime":1611769249064,"results":"47","hashOfConfig":"26"},{"size":819,"mtime":1611762406502,"results":"48","hashOfConfig":"26"},{"size":2708,"mtime":1611766613040,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"14id2jx",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\Dell\\Event-Mangement-App\\src\\index.js",[],["106","107"],"C:\\Users\\Dell\\Event-Mangement-App\\src\\App.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\serviceWorker.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\config\\firebase.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\index.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\RegisterForm.jsx",["108"],"import { useHistory } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Input, Button, Alert } from \"antd\";\r\nimport \"./RegisterForm.css\";\r\nimport { register } from \"./../../actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"./../Header/Header\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .required(\"Must enter your name\")\r\n    .min(6, \"too short\"),\r\n  contact: Yup.number().required(\"Must give number\"),\r\n  email: Yup.string()\r\n    .required(\"Must give email\")\r\n    .email(\"Invalid Email\"),\r\n  password: Yup.string()\r\n    .required(\"Enter your Password\")\r\n    .min(8, \"Too short\"),\r\n  confirmPassword: Yup.string().when(\"password\", {\r\n    is: val => (val && val.length > 0 ? true : false),\r\n    then: Yup.string().oneOf(\r\n      [Yup.ref(\"password\")],\r\n      \"Both password need to be the same\"\r\n    )\r\n  })\r\n});\r\n\r\nconst RegisterForm = props => {\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          contact: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\"\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={values => {\r\n\r\n          props.register(values, props.history)\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting\r\n        }) => (\r\n          <>\r\n            <Header />\r\n            <div className=\"register-form-container\">\r\n              <form className=\"form\">\r\n                <div className=\"form-field\">\r\n                  <label htmlFor=\"name\">Name</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your name\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                  {errors.name && touched.name ? (\r\n                    <div className=\"Error-message\">{errors.name}</div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"form-field\">\r\n                  <label htmlFor=\"contact\">Contact</label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"Enter contact Number\"\r\n                    id=\"contact\"\r\n                    name=\"contact\"\r\n                    onChange={handleChange}\r\n                    value={values.contact}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                  {errors.contact && touched.contact ? (\r\n                    <div className=\"Error-message\">{errors.contact}</div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"form-field\">\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email Address\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    onChange={handleChange}\r\n                    value={values.email}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                  {errors.email && touched.email ? (\r\n                    <div className=\"Error-message\">{errors.email}</div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"form-field\">\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <Input.Password\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    onChange={handleChange}\r\n                    value={values.password}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                  {errors.password && touched.password ? (\r\n                    <div className=\"Error-message\">{errors.password}</div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"form-field\">\r\n                  <label htmlFor=\"password\">Confirm Password</label>\r\n                  <Input.Password\r\n                    type=\"password\"\r\n                    placeholder=\"Enter the confirmed password\"\r\n                    id=\"confirmPassword\"\r\n                    name=\"confirmPassword\"\r\n                    onChange={handleChange}\r\n                    value={values.confirmPassword}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                  {errors.confirmPassword ? (\r\n                    <div className=\"Error-message\">\r\n                      {errors.confirmPassword}\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"form-field Button\">\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                    className=\"register-button\"\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n                <div className=\"form-field\">\r\n                  <p>\r\n                    Already have an account.{\" \"}\r\n                    <span\r\n                      style={{\r\n                        color: \"blue\",\r\n                        textDecoration: \"underline\",\r\n                        margin: \"1px\",\r\n                        cursor: \"pointer\"\r\n                      }}\r\n                      onClick={() => {\r\n                        props.history.push(\"/login\");\r\n                      }}\r\n                    >\r\n                      Sign In\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              </form>\r\n              <div className=\"error-div\">\r\n                {props.error === true && (\r\n                  <Alert\r\n                    style={{\r\n                      margin: \"1em\",\r\n                      width: \"300px\",\r\n                      textAlign: \"center\"\r\n                    }}\r\n                    type=\"error\"\r\n                    message=\"Something went wrong\"\r\n                  ></Alert>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    error: state.errorReducer\r\n  };\r\n};\r\n\r\nconst mapDisptachToProps = dispatch => {\r\n  return {\r\n    register:(newUser, history) => {\r\n      dispatch(register(newUser, history));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDisptachToProps)(RegisterForm);\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\EditForm.jsx",["109"],"import { useHistory } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { Input } from \"antd\";\r\nimport { Upload, Button, Icon } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport \"./CreateEvent.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateValues, uploadImage } from \"./../../actions\";\r\nimport PlacesInput from \"./PlacesInput\";\r\nimport Header from './../Header/Header';\r\n\r\nconst CreateEvent = props => {\r\n  let history = useHistory();\r\n\r\n \r\n\r\n  let uploader;\r\n  const imageUpload = file => {\r\n    console.log(file.fileList);\r\n    uploader = file.fileList;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: props.obj && props.obj.name,\r\n        maxMembers: props.obj && props.obj.maxMembers,\r\n        description: props.obj && props.obj.description,\r\n        price: props.obj && props.obj.price,\r\n        contactNumber: props.obj && props.obj.contactNumber,\r\n        places: \"\"\r\n       \r\n      }}\r\n      onSubmit={values => {\r\n        props.updateValues(\r\n          props.obj.id,\r\n          values.name,\r\n          values.description,\r\n          values.price,\r\n          values.maxMembers,\r\n          values.contactNumber,\r\n          values.places,\r\n          history\r\n        );\r\n        props.isUpdated === true && props.history.push(\"/MyEvents\");\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <>\r\n        <Header/>\r\n          <div className=\"form-container\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"eventName\">Event Name</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Event name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  onChange={handleChange}\r\n                  value={values.name}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"maxMembers\">Maxium Members</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"maxMembers\"\r\n                  name=\"maxMembers\"\r\n                  onChange={handleChange}\r\n                  value={values.maxMembers}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"description\">Event Description</label>\r\n                <Input.TextArea\r\n                  placeholder=\"Describe your event....\"\r\n                  type=\"text\"\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  autoSize={true}\r\n                  maxLength={1000}\r\n                  onChange={handleChange}\r\n                  value={values.description}\r\n                ></Input.TextArea>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"price\">Price per ticket</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  onChange={handleChange}\r\n                  value={values.price}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"contactNumber\">Contact Number</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"contactNumber\"\r\n                  name=\"contactNumber\"\r\n                  onChange={handleChange}\r\n                  value={values.contactNumber}\r\n                ></Input>\r\n              </div>\r\n\r\n              <div className=\"form-field\">\r\n                <label>Venue</label>\r\n                <PlacesInput setFieldValue={setFieldValue} />\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <Upload onChange={imageUpload} multiple>\r\n                  <Button>\r\n                    <Icon type=\"upload\" /> Upload\r\n                  </Button>\r\n                </Upload>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <button\r\n                  className=\"create-event-button\"\r\n                  onClick={handleSubmit}\r\n                  type=\"submit\"\r\n                >\r\n                  Save\r\n                \r\n                </button>\r\n              </div>\r\n              \r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    url: state.imageUpload.url,\r\n    createrId: state.firebase.auth.uid,\r\n    imageUpload: state.imageUpload,\r\n    obj: state.updateEvent[0],\r\n    isUpdated: state.updateEvent.isUpdated,\r\n    loading: state.loadingReducer\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  updateValues,\r\n  uploadImage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEvent);\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\CreateEvent.jsx",["110"],"import { useHistory } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { Input } from \"antd\";\r\nimport { Upload, Button, Icon, Alert } from \"antd\";\r\nimport { Formik } from \"formik\";\r\nimport \"./CreateEvent.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { createEvent, uploadImage } from \"./../../actions\";\r\nimport PlacesInput from \"./PlacesInput\";\r\nimport Header from \"./../Header/Header\";\r\n\r\nconst CreateEvent = props => {\r\n  \r\n\r\n  let uploader;\r\n  const imageUpload = file => {\r\n    console.log(file.fileList);\r\n    uploader = file.fileList;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        maxMembers: \"\",\r\n        description: \"\",\r\n        price: \"\",\r\n        contactNumber: \"\",\r\n        places: \"\"\r\n    \r\n      }}\r\n      onSubmit={async values => {\r\n        const urls = await props.uploadImage(uploader, values.name);\r\n\r\n        props.createEvent({\r\n          ...values,\r\n          creator: props.creatorId,\r\n          images: urls\r\n        });\r\n        props.history.push(\"/homePage\");\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <>\r\n          <Header />\r\n     \r\n          <div className=\"form-container\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"eventName\">Event Name</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Event name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  onChange={handleChange}\r\n                  value={values.name}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"maxMembers\">Maxium Members</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"maxMembers\"\r\n                  name=\"maxMembers\"\r\n                  onChange={handleChange}\r\n                  value={values.maxMembers}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"description\">Event Description</label>\r\n                <Input.TextArea\r\n                  placeholder=\"Describe your event....\"\r\n                  type=\"text\"\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  // autoSize={true}\r\n                  autoSize={{ minRows: 1, maxRows: 7 }}\r\n                  onChange={handleChange}\r\n                  value={values.description}\r\n                ></Input.TextArea>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"price\">Price per ticket</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  onChange={handleChange}\r\n                  value={values.price}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <label htmlFor=\"contactNumber\">Contact Number</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"contactNumber\"\r\n                  name=\"contactNumber\"\r\n                  onChange={handleChange}\r\n                  value={values.contactNumber}\r\n                ></Input>\r\n              </div>\r\n\r\n              <div className=\"form-field\">\r\n                <label>Venue</label>\r\n                <PlacesInput setFieldValue={setFieldValue} />\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <Upload onChange={imageUpload} multiple>\r\n                  <Button>\r\n                    <Icon type=\"upload\" /> Upload\r\n                  </Button>\r\n                </Upload>\r\n              </div>\r\n              <div className=\"form-field\">\r\n                <button\r\n                  className=\"create-event-button\"\r\n                  onClick={handleSubmit}\r\n                  type=\"submit\"\r\n                >\r\n                  Create Event\r\n                  {props.loading === true && (\r\n                    <Icon\r\n                      type=\"loading\"\r\n                      style={{ color: \"white\", margin: \"3px\" }}\r\n                    ></Icon>\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </form>\r\n            <div className=\"error-div\">\r\n              {props.error === true && (\r\n                <Alert\r\n                  style={{\r\n                    margin: \"1em\",\r\n                    width: \"300px\",\r\n                    textAlign: \"center\"\r\n                  }}\r\n                  type=\"error\"\r\n                  message=\"Something went wrong\"\r\n                ></Alert>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    url: state.imageUpload.url,\r\n    creatorId: state.firebase.auth.uid,\r\n    imageUpload: state.imageUpload,\r\n    fetchedValues: state.updateEvent,\r\n    loading: state.loadingReducer,\r\n    error: state.errorReducer\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  createEvent,\r\n  uploadImage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEvent);\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\MyEvents.jsx",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventDetail.jsx",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\LoginForm.jsx",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\LandingPage.jsx",["111"],"import React from \"react\";\r\nimport \"./LandingPage.css\";\r\nimport { Button, Icon } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst LandingPage = () => {\r\n  return (\r\n    <div className=\"landing-page\">\r\n      <p className=\"landing-page-heading\">Events</p>\r\n      <NavLink to=\"/homePage\">\r\n        <button className=\"landing-page-button\">\r\n          Get Started <Icon type=\"arrow-right\" className=\"landing-page-icon\" />\r\n        </button>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\HomePage.jsx",["112"],"import React, { Component } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./HomePage.css\";\r\nimport { Layout, Alert } from \"antd\";\r\nimport EventList from \"./events/EventList\";\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"./Header/Header\";\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    const { error } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout className=\"layout-style\">\r\n          <Header />\r\n          <section className=\"events-list\">\r\n            <EventList />\r\n          </section>\r\n          <div className=\"error-div\">\r\n            {this.props.error === true && (\r\n              <Alert\r\n                style={{\r\n                  margin: \"1em\",\r\n                  width: \"300px\",\r\n                  textAlign: \"center\"\r\n                }}\r\n                type=\"error\"\r\n                message=\"Something went wrong.\"\r\n              ></Alert>\r\n            )}\r\n          </div>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    error: state.errorReducer\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(HomePage);\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\eventsReducers.js",["113"],"let events = [];\r\n\r\nexport default (state = events, action) => {\r\n    switch (action.type) {\r\n        case \"CREATE_EVENT\":\r\n            return [...state, action.event];\r\n        case \"ERROR\":\r\n            return state;\r\n        case \"DELETED\":\r\n            return state;\r\n        case \"NOT_DELETED\":\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};","C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\authReducer.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\imageUpload.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\updateEvent.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\errorReducer.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\reducers\\loadingReducer.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\actions\\index.js",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\form\\PlacesInput.jsx",["114"],"import React from \"react\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { Input } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./PlacesInput.css\";\r\n\r\nconst PlacesInput = ({ setFieldValue, placesField }, props) => {\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null,\r\n  });\r\n\r\n  const handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n    setFieldValue(\"places\", latLng);\r\n  };\r\n\r\n  const handleChange = (address) => {\r\n    setAddress(address);\r\n  };\r\n  return (\r\n    <div>\r\n      <PlacesAutocomplete\r\n        value={address}\r\n        onChange={handleChange}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <>\r\n            <Input\r\n              style={{\r\n                height: \"32px\",\r\n              }}\r\n              {...getInputProps({\r\n                placeholder: \"Type your address\",\r\n              })}\r\n            ></Input>\r\n            <div>{loading ? <div>...loading</div> : null}</div>\r\n            {suggestions.map((suggestion) => {\r\n              console.log(suggestion)\r\n              const className = suggestion.active\r\n                ? \"suggestion-item--active\"\r\n                : \"suggestion-item\";\r\n              const style = suggestion.active\r\n                ? {\r\n                    backgroundColor: \"#fafafa\",\r\n                    cursor: \"pointer\",\r\n                    padding: \"5px\",\r\n                    borderBottom: \"1px solid #d9d9d9\",\r\n                    borderLeft: \"1px solid #d9d9d9\",\r\n                    borderRight: \"1px solid #d9d9d9\",\r\n                  }\r\n                : {\r\n                    backgroundColor: \"#ffffff\",\r\n                    cursor: \"pointer\",\r\n                    padding: \"5px\",\r\n                    borderBottom: \"1px solid #d9d9d9\",\r\n                    borderLeft: \"1px solid #d9d9d9\",\r\n                    borderRight: \"1px solid #d9d9d9\",\r\n                  };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n               \r\n                >\r\n                \r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    fetchedValues: state.updateEvent[0],\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(PlacesInput);\r\n","C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventList.jsx",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\events\\EventDetailMap.jsx",[],"C:\\Users\\Dell\\Event-Mangement-App\\src\\components\\Header\\Header.jsx",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":10,"nodeType":"121","messageId":"122","endLine":1,"endColumn":20},{"ruleId":"119","severity":1,"message":"123","line":20,"column":5,"nodeType":"121","messageId":"122","endLine":20,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":1,"column":10,"nodeType":"121","messageId":"122","endLine":1,"endColumn":20},{"ruleId":"119","severity":1,"message":"124","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":16},{"ruleId":"119","severity":1,"message":"125","line":11,"column":13,"nodeType":"121","messageId":"122","endLine":11,"endColumn":18},{"ruleId":"126","severity":1,"message":"127","line":3,"column":1,"nodeType":"128","endLine":16,"endColumn":3},{"ruleId":"119","severity":1,"message":"129","line":12,"column":10,"nodeType":"121","messageId":"122","endLine":12,"endColumn":21},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'uploader' is assigned a value but never used.","'Button' is defined but never used.","'error' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'coordinates' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]